/*
Copyright(c) 2014 Hashmi1

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Utility;
using System.IO;

/*
 * FurnitureWorkshop: is a standalone program for generating animation marker placement info for converted morrowind furniture.
 * 
 * Currently converted furniture is retained in its morrowind form (STAT or ACTI) and invisible skyrim FURN
 * is placed on top of it using the Addon Functionality implemented in Reference Placement. 
 * 
 * This program is used to make a linking configuration file that stores which FURN marker to use for which morrowind
 * model, and how to place it relative to the morrowind model in the world. 
 * 
 * For this purpose FurnitureWorkshop can create a Skyrim format esp with all unique morrowind furniture models placed in a cell in a row with a choice of
 * Skyrim FURN markers placed on top. The user can then load the esp in Creation Kit (CK) and can tweak the positioning of the
 * markers relative to the morrowind models. The user can also choose which marker to allow on the furniture (for example whether a
 * bed is single or double, or whether a bench is single or double).
 * The esp can then be re-imported by FurnitureWorkshop and turned into a linking config file which will be used by the main
 * IndorilConverter module when converting furniture.
 * 
 */

namespace converter
{
    class FurnitureWorkshop
    {
        static TES5.Record chair;
        static TES5.Record bench;
        static TES5.Record bed;
        static TES5.Record bed_double;

        static Dictionary<uint /* form_id */, string /* editor_id */> formId_index = new Dictionary<uint, string>();

        public static void read_formId_index()
        {
            TextReader reader = File.OpenText(Config.Paths.Temporary.furn_formid_index);

            while (reader.Peek() != -1)
            {
                string line = reader.ReadLine().Trim();

                if (line.StartsWith("#"))
                {
                    continue;
                }

                uint formid = uint.Parse(line.Split('=').Last());
                string editor_id = line.Split('=').First();

                formId_index.Add(formid, editor_id);
            }


        }

        public static void make_formID_index(TES5.Group furn)
        {
            chair = furn.find_record("mw_chair_marker");
            bed = furn.find_record("mw_bed_marker");
            bench = furn.find_record("mw_bench_marker");
            bed_double = furn.find_record("mw_doublebed_marker");

            TextWriter f2 = File.CreateText(Config.Paths.Temporary.furn_formid_index);
            f2.WriteLine("# !AUTO-GENERATED! Do NOT edit this file. It contains formid index for FURN markers.");

            f2.WriteLine("mw_chair_marker=" + chair.id);
            f2.WriteLine("mw_bench_marker=" + bench.id);
            f2.WriteLine("mw_bed_marker=" + bed.id);
            f2.WriteLine("mw_doublebed_marker=" + bed_double.id);

            f2.Close();
        }

        public static void make_marker_config()
        {
            TES5.ESM esm = new TES5.ESM();
            esm.add_masters("Skyrim.esm");

            TextWriter file_01 = File.CreateText(Config.Paths.Temporary.furn_linker);
            
            file_01.WriteLine("# !AUTO-GENERATED! Do NOT modify this file by hand. Contains linking data for FURN markers.");
            
            TES5.Group furn = Convert.FURN.convert();
            make_formID_index(furn);

            TES5.Group stats = Convert.STAT.convert(Config.Paths.mw_esm,true);
            TES5.Group acti = Convert.ACTI.getInstance().convert(Config.Paths.mw_esm, true);

            TES5.Group lgtm = Convert.LGTM.convert();

            TES5.CELL cell = new TES5.CELL("mw_furnitureworkshop");

            file_01.WriteLine("cell=" + cell.id);

            cell.full_name = "Furniture Workshop";
            cell.add_ambient_light(Convert.LGTM.get(Convert.CellTYPE.TYPE.DEFAULT));
            cell.pack();
            TES5.Group cell_grp = new TES5.Group("CELL");
            cell.addToGroup(cell_grp);

            List<TES5.Record> grps = new List<TES5.Record>(stats.records);
            foreach (TES5.Record r in acti.records)
            {
                grps.Add(r);
            }
            

            # region
            float x = -256f;
            HashSet<string> model_lst = new HashSet<string>();
            foreach (TES5.Record record in grps)
            {
                TES5.Field modl = record.find_field("MODL");
                

                if (modl == null)
                {
                    Log.error("STAT found with no model.");
                }

                string model = Text.trim(new string(modl.getData().ReadChars(modl.dataSize))).ToLower();

                if (!(model.Contains("chair") || model.Contains("bench") || model.Contains("bed") || model.Contains("stool") || model.Contains("hammock")))
                {
                    continue;
                }

                if (model_lst.Contains(model))
                {
                    Log.non_fatal_error(" FURNITURE model: " + model + " reused.");
                    continue;
                }

                model_lst.Add(model);
                x = x + 256f;

                TES5.REFR refr = new TES5.REFR(record.id, x, 0, 0, 0, 0, 0);

                if ((model.Contains("chair") || model.Contains("stool")))
                {
                    TES5.REFR marker = new TES5.REFR(chair.id, x, 0, -20, 0, 0, (float)Math.PI);
                    //marker.setFlag(0x800); // make marker initially disabled

                    cell.temp_references.addRecord(refr);
                    cell.temp_references.addRecord(marker);
                    file_01.WriteLine(model + "=" + marker.id);
                }

                else if (model.Contains("bench"))
                {
                    TES5.REFR marker_1 = new TES5.REFR(chair.id, x, 0, -20, 0, 0, (float)Math.PI);
                    TES5.REFR marker_2 = new TES5.REFR(bench.id, x, 0, -20, 0, 0, -(float)Math.PI);
                    marker_1.setFlag(0x800); // make marker initially disabled

                    cell.temp_references.addRecord(refr);
                    cell.temp_references.addRecord(marker_1);
                    cell.temp_references.addRecord(marker_2);
                    file_01.WriteLine(model + "=" + marker_1.id);
                    file_01.WriteLine(model + "=" + marker_2.id);
                }

                else if (model.Contains("bed") || model.Contains("hammock"))
                {
                    TES5.REFR marker_1 = new TES5.REFR(bed.id, x, 0, -20, 0, 0, (float)Math.PI/2f);
                    TES5.REFR marker_2 = new TES5.REFR(bed_double.id, x, 0, -20, 0, 0, (float)Math.PI/2f);

                    marker_1.setFlag(0x800); // make marker initially disabled
                    //marker_2.setFlag(0x800); // make marker initially disabled

                    cell.temp_references.addRecord(refr);
                    cell.temp_references.addRecord(marker_1);
                    cell.temp_references.addRecord(marker_2);

                    file_01.WriteLine(model + "=" + marker_1.id);
                    file_01.WriteLine(model + "=" + marker_2.id);
                }



            }
            # endregion

            file_01.Close();


            esm.add_group(stats);
            esm.add_group(acti);
            esm.add_group(furn);
            esm.add_group(lgtm);
            esm.add_group(cell_grp);

            esm.write_to_file(Config.Paths.Temporary.furn_placement_esp);
            
        }
        
        public static void read_marker_config()
        {
            read_formId_index();

            ////////////////////////////////////////////////////////////////
            // Read Model-To-Marker Linking Info
            ////////////////////////////////////////////////////////////////
            
            TextReader tr = File.OpenText(Config.Paths.Temporary.furn_linker);

            tr.ReadLine();
            string cell_info = tr.ReadLine();
            uint cell_id = uint.Parse(cell_info.Split('=').Last());

            Dictionary<uint /* marker_ref_id*/, string /*editor_id*/> linking_info = new Dictionary<uint, string>();

            while (tr.Peek() != -1)
            {
                string line = tr.ReadLine();
                string stat_id = line.Split('=').First().Trim();
                uint marker_id = uint.Parse(line.Split('=').Last());
                linking_info.Add(marker_id, stat_id);
            }

            ////////////////////////////////////////////////////////////////
            // Read Marker Placement ESP
            ////////////////////////////////////////////////////////////////

            Dictionary<uint, TES5.REFR.Placement> linking_placement = new Dictionary<uint, TES5.REFR.Placement>();

            TES5.ESM esm = TES5.ESM.read_from_file(Config.Paths.Temporary.furn_placement_esp);
            TES5.Group ref_grp = null;
            foreach (TES5.Group g in esm.groups)
            {
                ref_grp = g.find_group(cell_id, TES5.Group.TYPE.TEMP_REFR);
                if (ref_grp != null)
                {
                    break;
                }
            }

            if (ref_grp == null)
            {
                Log.error("Furniture Workshop cell was not found in " + Config.Paths.Temporary.furn_placement_esp + " please make sure that you modify the file made by this program.");
            }

            TextWriter fout = File.CreateText(Config.Paths.furniture_marker_config);
            fout.WriteLine("# !AUTO-GENERATED! Modifying this file manually might break the converter, use FurnitureWorkshop instead.");

            HashSet<string> chk_lst = new HashSet<string>();

            foreach (TES5.Record rec in ref_grp.records)
            {
                if (!linking_info.ContainsKey(rec.id))
                {
                    continue;
                }

                if (rec.flagSet(0x800) || rec.flagSet(0x20)) // if told to ignore marker then don't add it
                {
                    continue;
                }

                if (chk_lst.Contains(linking_info[rec.id]))
                {
                    Log.error("Multiple furniture markers enabled for model: " + linking_info[rec.id]);
                }

                chk_lst.Add(linking_info[rec.id]);

                TES5.REFR mr = new TES5.REFR(rec);

                string base_marker_edid = formId_index[mr.base_id];

                fout.WriteLine(linking_info[rec.id] + "," + base_marker_edid + "," + mr.loc.x + "," + mr.loc.y + "," + mr.loc.z + "," + mr.loc.xR + "," + mr.loc.yR + "," + mr.loc.zR);

            }

            fout.Close();

        }
        
        static void Main(string[] args)
        {
            //make_marker_config();
            //read_marker_config();
        }
    }
}
